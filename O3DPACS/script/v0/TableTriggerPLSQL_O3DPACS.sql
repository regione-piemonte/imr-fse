TRIGGER "CODESEQUENCES_PK_TRG" BEFORE
  INSERT ON CODESEQUENCES FOR EACH ROW BEGIN
	IF :new.pk IS NULL THEN
  		SELECT CodeSequences_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "DEPRECATIONEVENTS_PK_TRG" BEFORE
  INSERT ON DeprecationEvents FOR EACH ROW BEGIN
	IF :new.pk IS NULL THEN
  		SELECT DeprecationEvents_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "EQUIPMENT_PK_TRG" BEFORE
  INSERT ON EQUIPMENT FOR EACH ROW BEGIN
	IF :new.pk IS NULL THEN
  		SELECT Equipment_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "FIRSTINSTANCETRIGGER" BEFORE
  INSERT OR UPDATE ON Studies FOR EACH ROW BEGIN
	  IF ((:NEW.lastStatusChangeDate IS NOT NULL)AND(:OLD.lastStatusChangeDate IS NULL)) THEN
  		SELECT sysdate INTO :new.dateFirstInstanceArrival FROM DUAL;
  	END IF;
END;

TRIGGER "STUDIESALTER" AFTER
UPDATE OF studyInstanceUID ON Studies REFERENCING NEW as newRow OLD as oldRow FOR EACH ROW BEGIN
	UPDATE SERIES SET STUDYFK=:newRow.STUDYINSTANCEUID WHERE STUDYFK=:oldRow.STUDYINSTANCEUID;
	UPDATE PHYSICIANSTOSTUDIES SET STUDYFK=:newRow.STUDYINSTANCEUID WHERE STUDYFK=:oldRow.STUDYINSTANCEUID;
	UPDATE STUDYLOCATIONS SET STUDYFK=:newRow.STUDYINSTANCEUID WHERE STUDYFK=:oldRow.STUDYINSTANCEUID;
	UPDATE WLREQUESTEDPROCEDURES SET STUDYFK=:newRow.STUDYINSTANCEUID WHERE STUDYFK=:oldRow.STUDYINSTANCEUID;
	UPDATE WLPATIENTDATAPERVISIT SET STUDYFK=:NEWROW.STUDYINSTANCEUID WHERE STUDYFK=:OLDROW.STUDYINSTANCEUID;
	UPDATE FORWARDSCHEDULE SET STUDYFK=:NEWROW.STUDYINSTANCEUID WHERE STUDYFK=:OLDROW.STUDYINSTANCEUID;
  -- UPDATE verifiedkos SET STUDYFK=:NEWROW.STUDYINSTANCEUID WHERE STUDYFK=:OLDROW.STUDYINSTANCEUID;
END StudiesAlter;

TRIGGER "FORWARDSCHEDULE_PK_TRG" BEFORE
  INSERT ON FORWARDSCHEDULE FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT FORWARDSCHEDULE_PK_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "HL7ALLERGIES_PK_TRG" BEFORE
  INSERT ON HL7ALLERGIES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT HL7Allergies_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "HL7MESSAGESPK_TRG" BEFORE
  INSERT ON Hl7Messages FOR EACH ROW BEGIN
	  IF :NEW.PK IS NULL THEN
  SELECT Hl7MessagesPK_SEQ.NEXTVAL INTO :NEW.PK FROM DUAL;
END IF;

END;

TRIGGER "HL7MESSAGETYPES_PK_TRG" BEFORE
  INSERT ON Hl7MessageTypes FOR EACH ROW BEGIN
	IF :new.pk IS NULL THEN
  		SELECT Hl7MessageTypes_PK_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "HL7NODESPK_TRG" BEFORE
  INSERT ON Hl7Nodes FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  SELECT Hl7NodesPkSeq.NEXTVAL INTO :NEW.PK FROM DUAL;
END IF;
END;

TRIGGER "HL7OBSERVATIONS_PK_TRG" BEFORE
  INSERT ON HL7OBSERVATIONS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT HL7Observations_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "IMAGEEVENTS_PK_TRG" BEFORE
  INSERT ON ImageEvents FOR EACH ROW BEGIN
	IF :new.id IS NULL THEN
  		SELECT ImageEvents_pk_SEQ.NEXTVAL INTO :new.id FROM DUAL;
  	END IF;
END;

TRIGGER "IMAGEMASKING_PK_TRG" BEFORE
  INSERT ON ImageMasking FOR EACH ROW BEGIN
	IF :new.pk IS NULL THEN
  		SELECT ImageMasking_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "IMAGESALTER" AFTER UPDATE OF sopInstanceUID ON Images
  REFERENCING NEW AS NEWROW OLD AS OLDROW FOR EACH ROW BEGIN
    UPDATE PresStatesToImages SET imageFK =:newRow.sopInstanceUID WHERE imageFK=:oldRow.sopInstanceUID;
    UPDATE OverlaysToImages SET imageFK =:newRow.sopInstanceUID WHERE imageFK=:oldRow.sopInstanceUID;
    UPDATE ImageNumberOfFrames SET sopInstanceUid =:newRow.sopInstanceUID WHERE sopInstanceUid=:oldRow.sopInstanceUID;
END ImagesAlter;

TRIGGER "IMAGESNEARLINEALTER" AFTER UPDATE OF sopInstanceUID ON ImagesNearline
  REFERENCING NEW AS NEWROW OLD AS OLDROW FOR EACH ROW BEGIN
    UPDATE PresStatesToImages SET imageFK =:newRow.sopInstanceUID WHERE imageFK=:oldRow.sopInstanceUID;
    UPDATE OverlaysToImages SET imageFK =:newRow.sopInstanceUID WHERE imageFK=:oldRow.sopInstanceUID;
    UPDATE ImageNumberOfFrames SET sopInstanceUid =:newRow.sopInstanceUID WHERE sopInstanceUid=:oldRow.sopInstanceUID;
END ImagesNearlineAlter;

TRIGGER "IMAGESOFFLINEALTER" AFTER UPDATE OF sopInstanceUID ON ImagesOffline
  REFERENCING NEW AS NEWROW OLD AS OLDROW FOR EACH ROW BEGIN
    UPDATE PresStatesToImages SET imageFK =:newRow.sopInstanceUID WHERE imageFK=:oldRow.sopInstanceUID;
    UPDATE OverlaysToImages SET imageFK =:newRow.sopInstanceUID WHERE imageFK=:oldRow.sopInstanceUID;
    UPDATE ImageNumberOfFrames SET sopInstanceUid =:newRow.sopInstanceUID WHERE sopInstanceUid=:oldRow.sopInstanceUID;
END ImagesOfflineAlter;

TRIGGER "KNOWNNODES_PK_TRG" BEFORE
  INSERT ON KNOWNNODES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT KnownNodes_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "LEGALSTORAGESETTINGS_TRG" BEFORE
  INSERT ON LEGALSTORAGESETTINGS FOR EACH ROW BEGIN
	  IF :new.ID IS NULL THEN
  		SELECT LEGALSTORAGESETTINGS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  	END IF;
END;

TRIGGER "MOVE_STUDY_HISTORY_PK_TRG" BEFORE
  INSERT ON MOVE_STUDY_HISTORY FOR EACH ROW
BEGIN
    IF :new.id IS NULL THEN
          SELECT MOVE_STUDY_HISTORY_pk_SEQ.NEXTVAL INTO :new.ID FROM DUAL;
    END IF;

    IF :new.ID_RETRY IS NULL THEN
          :new.ID_RETRY := 0;
    END IF;

END;

TRIGGER "MOVE_STUDY_HISTORY_UPD_PK_TRG" BEFORE
  UPDATE ON MOVE_STUDY_HISTORY FOR EACH ROW
BEGIN
    --IF :new.END_MOV IS NOT NULL AND :old.END_MOV is null THEN
    --      :new.ID_RETRY := nvl(:old.ID_RETRY,0) + 1;
    --ELSE
        IF :new.START_MOV IS NOT NULL and (:old.START_MOV IS NULL or :old.START_MOV != :new.START_MOV) AND :old.END_MOV is null THEN
              :new.ID_RETRY := nvl(:old.ID_RETRY,0) + 1;
        END IF;
    --END IF;
END;

TRIGGER "MOVESTUDYHISTORYPKTRG" BEFORE
  INSERT ON MoveStudyHistory FOR EACH ROW
BEGIN
    IF :new.id IS NULL THEN
          SELECT MoveStudyHistoryPkSeq.NEXTVAL INTO :new.id FROM DUAL;
    END IF;

    IF :new.idRetry IS NULL THEN
          :new.idRetry := 0;
    END IF;

END;

TRIGGER "MOVESTUDYHISTORYUPDPKTRG" BEFORE
  UPDATE ON MoveStudyHistory FOR EACH ROW
BEGIN

		-- se 'endmov' della stadymove è nullo, incrementa i retry: significa che ad ogni update corrisponde un retry.

        IF :new.startMov IS NOT NULL and (:old.startMov IS NULL or :old.startMov != :new.startMov) AND :old.endMov is null THEN
               :new.idRetry := nvl(:old.idRetry,0) + 1;
        END IF;  


        IF ISMOVECOMPLETED(:new.ACCESSIONNUMBER) = 1 THEN

			-- move fisicamente ultimata

			if :old.endMov is null AND :new.endMov is null then
                :new.endMov := SYSTIMESTAMP ;
            end if;

            :new.ERRORMESSAGE := 'MOVECOMPLETED - '||:new.ERRORMESSAGE;

        ELSE

			-- move fisicamente non ultimata

            IF :new.ERRORMESSAGE IS NOT NULL and (:old.ERRORMESSAGE IS NULL or instr(:old.ERRORMESSAGE, :new.ERRORMESSAGE) = 0 ) THEN

					-- se c'è un nuovo messaggio e non è già presente in 'errorMessage', lo memorizziamo

                    :new.ERRORMESSAGE := :old.ERRORMESSAGE || ' - ' || :new.ERRORMESSAGE;
            END IF;  

        END IF;  
END;

TRIGGER "MPPSBILLINGSEQ_PK_TRG" BEFORE
  INSERT ON MPPSBILLINGSEQ FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT MPPSBillingSeq_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "MPPSEXPOSUREDOSESEQUENCES_PK_T" BEFORE
  INSERT ON MPPSEXPOSUREDOSESEQUENCES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT MPPSExposureDoseSequences_pk_S.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "MPPSFILMCONSUMPTIONSEQUENCES_1" BEFORE
  INSERT ON MPPSFILMCONSUMPTIONSEQUENCES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT MPPSFilmConsumptionSequences_p.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "MPPSPERFORMEDSERIESSEQUENCES_1" BEFORE
  INSERT ON MPPSPERFORMEDSERIESSEQUENCES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT MPPSPerformedSeriesSequences_p.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "MPPSQUANTITYSEQUENCES_PK_TRG" BEFORE
  INSERT ON MPPSQUANTITYSEQUENCES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT MPPSQuantitySequences_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "MPPSRADIATIONDOSES_PK_TRG" BEFORE
  INSERT ON MPPSRADIATIONDOSES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT MPPSRadiationDoses_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "MPPSSCHEDSTEPATTRSEQ_PK_TRG" BEFORE
  INSERT ON MPPSSCHEDSTEPATTRSEQ FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT MPPSSchedStepAttrSeq_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "NEARLINESTORAGESETTINGS_TRG" BEFORE
  INSERT ON NEARLINESTORAGESETTINGS FOR EACH ROW BEGIN
	  IF :new.ID IS NULL THEN
  		SELECT NEARLINESTORAGESETTINGS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  	END IF;
END;

TRIGGER "NONIMAGESALTER" AFTER UPDATE OF sopInstanceUID ON NonImages
  REFERENCING NEW AS NEWROW OLD AS OLDROW FOR EACH ROW BEGIN
    UPDATE PresStatesToImages SET imageFK =:newRow.sopInstanceUID WHERE imageFK=:oldRow.sopInstanceUID;
    UPDATE OverlaysToImages SET imageFK =:newRow.sopInstanceUID WHERE imageFK=:oldRow.sopInstanceUID;
END NonImagesAlter;

TRIGGER "OFFLINESTORAGESETTINGS_TRG" BEFORE
  INSERT ON OFFLINESTORAGESETTINGS FOR EACH ROW BEGIN
	  IF :new.ID IS NULL THEN
  		SELECT OFFLINESTORAGESETTINGS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  	END IF;
END;

TRIGGER "OTHERIDS_PK_TRG" BEFORE
  INSERT ON OTHERIDS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT OtherIDs_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "OVERLAYSALTER" AFTER UPDATE OF sopInstanceUID ON Overlays
  REFERENCING NEW AS NEWROW OLD AS OLDROW FOR EACH ROW BEGIN
    UPDATE OverlaysToImages SET overlayFK =:newRow.sopInstanceUID WHERE overlayFK=:oldRow.sopInstanceUID;
END OverlaysAlter;

TRIGGER "PATIENTDEMOGRAPHICS_PK_TRG" BEFORE
  INSERT ON PATIENTDEMOGRAPHICS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT PatientDemographics_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "PATIENTS_PK_TRG" BEFORE
  INSERT ON PATIENTS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT Patients_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "PERSONNEL_PK_TRG" BEFORE
  INSERT ON PERSONNEL FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT Personnel_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "PHYSICALMEDIA_PK_TRG" BEFORE
  INSERT ON PHYSICALMEDIA FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT PhysicalMedia_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "PRESSTATESALTER" AFTER UPDATE OF sopInstanceUID ON PresStates
  REFERENCING NEW AS NEWROW OLD AS OLDROW FOR EACH ROW BEGIN
    UPDATE PresStatesToImages SET presStateFK =:newRow.sopInstanceUID WHERE presStateFK=:oldRow.sopInstanceUID;
END PresStatesAlter;

TRIGGER "RECOVERY_PK_TRG" BEFORE
  INSERT ON RECOVERY_OLD FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT Recovery_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "SCHEDULEPROCESSES_PK_TRG" BEFORE
  INSERT ON SCHEDULEPROCESSES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT SCHEDULEPROCESSES_PK_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "SERIESALTER" AFTER
  UPDATE OF SERIESINSTANCEUID ON SERIES REFERENCING NEW AS NEWROW OLD AS OLDROW FOR EACH ROW BEGIN
  UPDATE IMAGES SET SERIESFK =:newRow.SERIESINSTANCEUID WHERE SERIESFK=:oldRow.SERIESINSTANCEUID;
  UPDATE IMAGESNEARLINE SET SERIESFK =:newRow.SERIESINSTANCEUID WHERE SERIESFK=:oldRow.SERIESINSTANCEUID;
  UPDATE IMAGESOFFLINE SET SERIESFK =:newRow.SERIESINSTANCEUID WHERE SERIESFK=:oldRow.SERIESINSTANCEUID;
  UPDATE NONIMAGES SET SERIESFK =:newRow.SERIESINSTANCEUID WHERE SERIESFK=:oldRow.SERIESINSTANCEUID;
  UPDATE OVERLAYS SET SERIESFK =:newRow.SERIESINSTANCEUID WHERE SERIESFK=:oldRow.SERIESINSTANCEUID;
  UPDATE PRESSTATES SET SERIESFK =:newRow.SERIESINSTANCEUID WHERE SERIESFK=:oldRow.SERIESINSTANCEUID;
  UPDATE STRUCTREPS SET SERIESFK =:newRow.SERIESINSTANCEUID WHERE SERIESFK=:oldRow.SERIESINSTANCEUID;
END SERIESALTER;

TRIGGER "STORAGEDEVICETYPES_TRG" BEFORE
  INSERT ON STORAGEDEVICETYPES FOR EACH ROW BEGIN
	  IF :new.ID IS NULL THEN
  		SELECT STORAGEDEVICETYPES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  	END IF;
END;

TRIGGER "STORAGEPOLICIES_TRG" BEFORE
  INSERT ON STORAGEPOLICIES FOR EACH ROW BEGIN
	  IF :new.ID IS NULL THEN
  		SELECT STORAGEPOLICIES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
  	END IF;
END;

TRIGGER "STRUCTREPS_BEF_INS" BEFORE
  INSERT ON STRUCTREPS FOR EACH ROW BEGIN IF :new.OBSERVATIONDATETIME IS NULL THEN :new.OBSERVATIONDATETIME := sysdate;
END IF;
END;

TRIGGER "STUDIESTOVERIFYALTER" after
  update of STUDYFK on STUDIESTOVERIFY referencing new as NEWROW old as OLDROW for each row begin
  UPDATE StudiesVerifierEvents SET STUDYFK =:newRow.StudyFK WHERE STUDYFK=:oldRow.StudyFK;
END STUDIESTOVERIFYALTER;

TRIGGER "STUDIESTOVERIFYVERDATE" BEFORE UPDATE ON STUDIESTOVERIFY for each row
begin

  IF :new.VERIFIEDDATE is not null and :old.VERIFIEDDATE is null then
     :new.TOBEIGNORED := 1;
     :new.JOBFINISHEDON := systimestamp;
  end if;

END STUDIESTOVERIFYVERDATE;

TRIGGER "STUDIESVERIFIEREVENTS_PK_TRG" BEFORE
  INSERT ON StudiesVerifierEvents FOR EACH ROW BEGIN
	IF :new.EVENTID IS NULL THEN
  		SELECT StudiesVerifierEvents_PK_SEQ.NEXTVAL INTO :new.EVENTID FROM DUAL;
  	END IF;
END;

TRIGGER "TR_SEQ_LOGS" BEFORE INSERT ON LOGS FOR EACH ROW
BEGIN
	select SEQ_LOGS.NEXTVAL INTO :NEW.ID FROM DUAL;
End;

TRIGGER "USERS_PK_TRG" BEFORE
  INSERT ON USERS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT Users_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "WLIMAGINGSERVICEREQUESTS_PK_TR" BEFORE
  INSERT ON WLIMAGINGSERVICEREQUESTS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT WLImagingServiceRequests_pk_SE.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "WLPATIENTDATAPERVISIT_PK_TRG" BEFORE
  INSERT ON WLPATIENTDATAPERVISIT FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT WLPatientDataPerVisit_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "WLREQUESTEDPROCEDURES_PK_TRG" BEFORE
  INSERT ON WLREQUESTEDPROCEDURES FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT WLRequestedProcedures_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "WLSCHEDULEDPROCEDURESTEPS_PK_T" BEFORE
  INSERT ON WLSCHEDULEDPROCEDURESTEPS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT WLScheduledProcedureSteps_pk_S.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "WLSCHEDULEDPROTOCOLS_PK_TRG" BEFORE
  INSERT ON WLSCHEDULEDPROTOCOLS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT WLScheduledProtocols_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;

TRIGGER "WLVISITS_PK_TRG" BEFORE
  INSERT ON WLVISITS FOR EACH ROW BEGIN
	  IF :new.pk IS NULL THEN
  		SELECT WLVisits_pk_SEQ.NEXTVAL INTO :new.pk FROM DUAL;
  	END IF;
END;
