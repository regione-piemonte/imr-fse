/*
 * SPDX-FileCopyrightText: (C) Copyright 2022 Regione Piemonte
 *
 * SPDX-License-Identifier: GPL-2.0
 */
package it.units.htl.web.utils;

import it.units.htl.maps.ServicesConfiguration;
import it.units.htl.maps.util.SessionManager;

import java.io.StringReader;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.SessionFactory;
import org.hibernate.StatelessSession;
import org.hibernate.criterion.Restrictions;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

/**
 * @author sangalli
 * this class is used to load configuration from DB and put that in an XmlDocument
 * could load configuration or from DB or from a String
 */
public class XmlConfigLoader {
	private static Log log = LogFactory.getLog(XmlConfigLoader.class);
	
	/**
	 * @param _xml the string to parse to generate Xml Document
	 * @return org.w3c.dom.Document document generated by parsing the string
	 */
	public static final Document getConfigurationFromString(String _xml){
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		Document config = null;
    	try {
			DocumentBuilder db = dbf.newDocumentBuilder();
			StringReader stringReader = new StringReader(_xml);
			InputSource is = new InputSource();
			is.setCharacterStream(stringReader);
			config = db.parse(is);
		} catch (Throwable e) {
			log.warn("Unable to load xml file", e);
		} 
		return config;
	}
	
	/**
	 * @param _serviceName the name of the service present in the DB
	 * @return org.w3c.dom.Document document generated by parsing the string loaded in the DB
	 */
	public static final Document getConfigurationFromDB(String _serviceName){
		SessionFactory sm = SessionManager.getInstance();        
    	StatelessSession s = sm.openStatelessSession();
    	ServicesConfiguration sc = new ServicesConfiguration();
    	sc.setServiceName(_serviceName);
    	List<ServicesConfiguration> results = (List<ServicesConfiguration> )s.createCriteria(ServicesConfiguration.class).add(Restrictions.eq("serviceName", sc.getServiceName())).list();    	
    	if(results.size() > 0){
    		ServicesConfiguration serviceConfigs = (ServicesConfiguration) results.get(0);
        	s.close();
        	return getConfigurationFromString(serviceConfigs.getConfiguration());
    	}else{
    		s.close();
    		return null;
    	}    	
	}
}
